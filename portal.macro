<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<repositoryVO id="__EFtrGoFIiEJQMw8IXhD">
  <name>portal</name>
  <parentId>__avYbKPJJjObzoPrV2er</parentId>
  <description>集团统一门户专用</description>
  <content><![CDATA[// 统一门户配置数据
var portal = "http://10.12.8.3/"
var appId = '2524895ce59e4fdd8376f9526552263b';
var appSecret = new Packages.java.lang.String('ed0c9cb27d5846bd95bdb6ef27a51d09');
/**
 * 获取集团统一门户accessToken
 */
function getAccessToken() {
  var url = new Packages.java.net.URL(portal + "open/api/token"); // constant
  var random = (Math.floor(Math.random() * 9000) + 1000) + ''; // 需转为字符串，否则JSON.stringify无法解析
  var timeStamp = getCurDate("yyyyMMddHHmmss") + ''
  var sign = getSign(appId, random, timeStamp, appSecret)
  var params = {
    appId: appId,
    random: random, 
    timeStamp: timeStamp,
    sign: sign + ''
  };
  var jsonObject = useHttpRequest(url, 'POST', [], params) // globalMethods
  var code = jsonObject.get('code');
  var accessToken = ''
  if(code == 0) {
    accessToken = jsonObject.get("data")
  }
  return accessToken
}


/**
 * 获取sign，加密参数字符串
 * @param {*} appId 
 * @param {*} random 
 * @param {*} timeStamp 
 * @param {*} appSecret 
 * @returns 
 */
function getSign (appId, random, timeStamp, appSecret) {
  var iv = appSecret.substring(appSecret.length() - 16)
  //AES算法，CBC模式，PKCS5Padding补码方式
  var cipher = new Packages.javax.crypto.Cipher.getInstance("AES/CBC/PKCS5Padding");
  
  //密钥参数
  var keySpec = new Packages.javax.crypto.spec.SecretKeySpec(appSecret.getBytes(), "AES");
  //IV参数
  var ivSpec = new Packages.javax.crypto.spec.IvParameterSpec(iv.getBytes());
  cipher.init(Packages.javax.crypto.Cipher.ENCRYPT_MODE, keySpec, ivSpec);
  //加密前文本
  var plainText = new Packages.java.lang.String(appId + "," + random + "," + timeStamp);
  //获得AES加密后的字符数组
  var encrypted = cipher.doFinal(plainText.getBytes());
  //通过base64编码后的加密字符数组
  var encoder = Packages.java.util.Base64.getEncoder();
  return encoder.encodeToString(encrypted);
}]]></content>
  <version>0</version>
</repositoryVO>