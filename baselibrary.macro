<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<repositoryVO id="__J9VM3iglRcbaxVHZh2U">
  <name>baselibrary</name>
  <parentId>__avYbKPJJjObzoPrV2er</parentId>
  <content><![CDATA[/**
 *数据源名称
 */
var DataSourceName = "obpm_task_business";

/**
 *系统库名称
 */
var SysDataBaseName = "obpm_task_system";

/**
 *企业微信应用密钥
 */
var EnterpriseWechatKey = "aJBaRfrVzW1f1z6tJxf-xxxxxxxxxxxxx";

/**获取application.yml中配置的路径**/
var rootPath = new Packages.cn.myapps.common.Environment.getInstance().getStorageRootPath();

/*域Id*/

var DomainId="IyYOI14wXLswP0d7Fsz";

/*软件Id*/

var ApplicationId="__rzuvXrZBA0FLQe8om6r";

/*管理账号*/
var SystemlLogin="smart";

/**
 *邮箱配置信息
 */
var EmailFrom = "chain@weioa365.com";
var EmailHost = "smtp.exmail.qq.com";
var EmailUser = "chain@weioa365.com";
var EmailPassword = "zvmyWz9GAxXccBwk";

/**
 *考虑历史数据：获取通用主数据类型返回Options，
 *valueName:当前字段名  type：通用主数据的类型
 */
function getUniversalDataOptions(valueName, type) {
    var doc = getCurrentDocument();
    var value = doc.getItemValueAsString(valueName);
    var opts = $TOOLS.createOptions();
    var sql = "select * from (select * from tlk_GeneralMasterData where item_类型 = '" + type + "' and item_状态='有效' and item_真实值 <>'" + value + "' union all select * from tlk_GeneralMasterData where item_真实值 ='" + value + "' )t order by item_排序号 asc ";
    opts.add("", "");
    var query = queryBySQL(sql);
    if (query != null) {
        for (var it = query.iterator(); it.hasNext(); ) {
            var data = it.next();
            var code = data.getItemValueAsString("真实值");
            var name = data.getItemValueAsString("显示值");
            var istrue = data.getItemValueAsString("是否默认值");
            if ("是".equals(istrue)) {
                opts.add(name, code, true);
            } else {
                opts.add(name, code);
            }

        }
    }
    return opts;
};

/** 数字金额大写转换(可以处理整数,小数,负数) */
function smalltoBIG(n) {
    var fraction = ['角', '分'];
    var digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];
    var unit = [['元', '万', '亿'], ['', '拾', '佰', '仟']];
    var head = n < 0 ? '欠' : '';
    n = Math.abs(n);

    var s = '';

    for (var i = 0; i < fraction.length; i++) {
        s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, '');
    }
    s = s || '整';
    n = Math.floor(n);

    for (var i = 0; i < unit[0].length && n > 0; i++) {
        var p = '';
        for (var j = 0; j < unit[1].length && n > 0; j++) {
            p = digit[n % 10] + unit[1][j] + p;
            n = Math.floor(n / 10);
        }
        s = p.replace(/(零.)*零$/, '').replace(/^$/, '零') + unit[0][i] + s;
    }
    return head + s.replace(/(零.)*零元/, '元').replace(/(零.)+/g, '零').replace(/^整$/, '零元整');
};

/**
 *根据角色名称判断当前用户是否具有下列角色
 *roleNames:角色名称
 */
function isOwenTheRolesByRoleNames(roleNames) {
    var flag = false;
    var roles = getWebUser().getRoles();
    for (var it = roles.iterator(); roles != null && it.hasNext(); ) {
        var role = it.next();
        var rolename = "-" + role.getName() + "-";
        if (roleNames.indexOf(rolename) >= 0) {
            flag = true;
            break;
        }
    }
    return flag;
};

/**
 *根据角色编号判断当前用户是否具有下列角色
 *roleNos:角色编号
 */
function isOwenTheRolesByRoleNos(roleNos) {
    var flag = false;
    var roles = getWebUser().getRoles();
    for (var it = roles.iterator(); roles != null && it.hasNext(); ) {
        var role = it.next();
        var roleNo = "-" + role.getRoleNo() + "-";
        if (roleNos.indexOf(roleNo) >= 0) {
            flag = true;
            break;
        }
    }
    return flag;
};

/**
 *根据角色名称和用户id判断该用户是否具有下列角色
 *roleNames:角色名称
 *userid:用户id
 */
function isOwenTheRolesByUserIdAndRoleNames(userid, roleNames) {
    var flag = false;
    var users = getUserById(userid);
    var roles = users.getRoles();
    for (var it = roles.iterator(); roles != null && it.hasNext(); ) {
        var role = it.next();
        var rolename = "-" + role.getName() + "-";
        if (roleNames.indexOf(rolename) >= 0) {
            flag = true;
            break;
        }
    }
    return flag;
};

/***
 *审批中单据不可以删除
 */
function deleteOnlyFill(formName) {
    var params = getParameter("_selects");
    if (!isNotNull(params)) {
        return "请选择要删除的记录";
    }
    var docids = "'" + params.replace(";", "','") + "'";
    var sql = "select * from tlk_" + formName + " where id in (" + docids + ") and stateLabel not in ('','未提交') ";
    var t_count = countBySQL(sql);
    if (t_count > 0) {
        return "已审批和审批中的单据不能删除";
    }
};

/***
 *跟进部门id获取部门类型是分公司还是总部
 */
function getDepartmentTypeByDeptid(deptid) {
    var rtn = "";
    var sql = "select * from " + departmentTable + " where id = '" + deptid + "'";
    var datas = queryByDSName("ronlyu", sql);
    if (datas != null) {
        for (var ite = datas.iterator(); ite.hasNext(); ) {
            var data = ite.next();
            rtn = data.get("FIELD1");
            break;
        }
    }
    return rtn;
};

/***
 *根据部门id获取部门名称
 */
function getDepartmentNameByDeptid(deptid) {
    var rtn = "";
    var sql = "select * from " + departmentTable + " where id = '" + deptid + "'";
    var datas = queryByDSName("ronlyu", sql);
    if (datas != null) {
        for (var ite = datas.iterator(); ite.hasNext(); ) {
            var data = ite.next();
            rtn = data.get("name");
            break;
        }
    }
    return rtn;
};

/***
 *根据用户id获取上级id
 */
function getSuperById(userid) {
    var rtn = "";
    var sql = "select * from " + userTable + " where id = '" + userid + "'";
    var datas = queryByDSName("ronlyu", sql);
    if (datas != null) {
        for (var ite = datas.iterator(); ite.hasNext(); ) {
            var data = ite.next();
            rtn = data.get("SUPERIOR");
            break;
        }
    }
    return rtn;
};

function CancelState(value) {
    var doc_c = getCurrentDocument();
    var process = getDocumentProcess(); //获取当前申明文档业务处理类
    var comment = "申请人取消单据"; //备注
    var flowoption = 86;
    var currnodeid = "";
    var state = doc_c.getState();
    var params_b = new Packages.cn.myapps.common.data.ParamsTable();
    if (state != null) {
        var flowid_b = state.getFlowid(); //当前对象的流程
        params_b.setParameter("_flowid", flowid_b);
        var noderts = state.getNoderts(); //如果流程没有走完且在某个节点
        if (noderts != null && noderts.size() > 0) { //如果当前流程有多个节点取其中一个节点
            var nodert = noderts.iterator().next();
            currnodeid = nodert.getNodeid(); //获取流程当前流程节点ID
        }
    }
    var nextnodeid = new Array();
    nextnodeid[0] = value; //下一流程节点
    var auser = doc_c.getAuthor();
    var user = new Packages.cn.myapps.base.web.WebUser(auser)
        process.doFlow(doc_c, params_b, currnodeid, nextnodeid, flowoption, comment, user);
};

//干预当前节点到指定节点value:目标节点，doc文档对象
function CancelState2(value, doc) {
    //var process = getDocumentProcess();//获取当前申明文档业务处理类
    var appid = getApplication();
    var process = getDocProcess(appid); //获取DOC业务处理类
    var userProcess = createProcess("cn.myapps.authtime.user.service.UserProcess"); //获取用户业务处理类
    var comment = "项目注销"; //备注
    var domainid = getDomainid();
    var flowoption = 86;
    var state = doc.getState();
    var params_b = new Packages.cn.myapps.common.data.ParamsTable();
    var currnodeid = "";
    if (state != null) {
        var flowid_b = state.getFlowid(); //当前对象的流程
        params_b.setParameter("_flowid", flowid_b);
        var noderts = state.getNoderts(); //如果流程没有走完且在某个节点
        if (noderts != null && noderts.size() > 0) { //如果当前流程有多个节点取其中一个节点
            var nodert = noderts.iterator().next();
            currnodeid = nodert.getNodeid(); //获取流程当前流程节点ID
        }
    }
    var nextnodeid = new Array();
    nextnodeid[0] = value; //下一流程节点
    var auser = doc.getAuthor();
    var user = new Packages.cn.myapps.base.web.WebUser(auser);
    process.doFlow(doc, params_b, currnodeid, nextnodeid, flowoption, comment, user);
};

var lunar = {
    tg: '甲乙丙丁戊己庚辛壬癸',
    dz: '子丑寅卯辰巳午未申酉戌亥',
    number: '一二三四五六七八九十',
    year: '鼠牛虎兔龙蛇马羊猴鸡狗猪',
    month: '正二三四五六七八九十冬腊',
    monthadd: [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
    calendar: [0xA4B, 0x5164B, 0x6A5, 0x6D4, 0x415B5, 0x2B6, 0x957, 0x2092F, 0x497, 0x60C96, 0xD4A, 0xEA5, 0x50DA9, 0x5AD, 0x2B6, 0x3126E, 0x92E, 0x7192D, 0xC95, 0xD4A, 0x61B4A, 0xB55, 0x56A, 0x4155B, 0x25D, 0x92D, 0x2192B, 0xA95, 0x71695, 0x6CA, 0xB55, 0x50AB5, 0x4DA, 0xA5B, 0x30A57, 0x52B, 0x8152A, 0xE95, 0x6AA, 0x615AA, 0xAB5, 0x4B6, 0x414AE, 0xA57, 0x526, 0x31D26, 0xD95, 0x70B55, 0x56A, 0x96D, 0x5095D, 0x4AD, 0xA4D, 0x41A4D, 0xD25, 0x81AA5, 0xB54, 0xB6A, 0x612DA, 0x95B, 0x49B, 0x41497, 0xA4B, 0xA164B, 0x6A5, 0x6D4, 0x615B4, 0xAB6, 0x957, 0x5092F, 0x497, 0x64B, 0x30D4A, 0xEA5, 0x80D65, 0x5AC, 0xAB6, 0x5126D, 0x92E, 0xC96, 0x41A95, 0xD4A, 0xDA5, 0x20B55, 0x56A, 0x7155B, 0x25D, 0x92D, 0x5192B, 0xA95, 0xB4A, 0x416AA, 0xAD5, 0x90AB5, 0x4BA, 0xA5B, 0x60A57, 0x52B, 0xA93, 0x40E95],
};
// 获取阴历日期
function getLunarDate(date) {
    println("date11==" + date);
    var temp = "";
    var year;
    var month;
    if (date == null || "".equals(date)) {
        return "";
    } else {
        date = date.split('-');
        year = parseInt(date[0]);
        month = date[1] - 1;
        day = parseInt(date[2]);
    }
    var total
    var m;
    var n;
    var k;
    var bit;
    var lunarYear;
    var lunarMonth;
    var lunarDay;
    var isEnd = false;
    var tmp = year;
    if (tmp < 1900) {
        tmp += 1900;
    }
    total = (tmp - 1921) * 365 + Math.floor((tmp - 1921) / 4) + lunar.monthadd[month] + day - 38;
    println("total111111==" + total);
    if (year % 4 == 0 && month > 1) {
        total++;
    }
    println("tota222222==" + total);
    for (m = 0; ; m++) {
        k = (lunar.calendar[m] < 0xfff) ? 11 : 12;
        for (n = k; n >= 0; n--) {
            bit = (lunar.calendar[m] >> n) & 1;
            if (total <= 29 + bit) {
                isEnd = true;
                break;
            }
            total = total - 29 - bit;
        }
        if (isEnd)
            break;
    }
    lunarYear = 1921 + m;
    lunarMonth = k - n + 1;
    lunarDay = total - 1;
    println("lunarMonth==" + lunarMonth);
    println("tota3333333==" + total);
    if (k == 12) {
        if (lunarMonth == Math.floor(lunar.calendar[m] / 0x10000) + 1) {
            lunarMonth = 1 - lunarMonth;
        }
        if (lunarMonth > Math.floor(lunar.calendar[m] / 0x10000) + 1) {
            lunarMonth--;
        }
    }
    if (lunarMonth < 1) {
        temp += "(闰)";
        temp += lunar.month.charAt(-lunarMonth - 1);
    } else {
        temp += lunar.month.charAt(lunarMonth - 1);
    }
    temp += "月";
    temp += (lunarDay < 11) ? '初' : ((lunarDay < 20) ? '十' : ((lunarDay < 30) ? '廿' : '三十'));
    if (lunarDay % 10 != 0 || lunarDay == 10) {
        temp += lunar.number.charAt((lunarDay - 1) % 10);
    }

    return temp;

};

function setSessionValue(name, value) {
    var MemoryCacheUtil = new Packages.cn.myapps.common.util.cache.MemoryCacheUtil();
    MemoryCacheUtil.putToPrivateSpace(name, value, getWebUser());
};

function getSessionValue(name) {
    var value = "";
    var MemoryCacheUtil = new Packages.cn.myapps.common.util.cache.MemoryCacheUtil();
    value = MemoryCacheUtil.getFromPrivateSpace(name, getWebUser());
    return value;
};

function removeSessionValue(name) {
    var MemoryCacheUtil = new Packages.cn.myapps.common.util.cache.MemoryCacheUtil();
    var value = MemoryCacheUtil.getFromPrivateSpace(name, getWebUser());
    if (value != null && value.length() > 0) {
        MemoryCacheUtil.removeFromPrivateSpace(name, getWebUser());
    }
};

/**
 *	考虑历史数据：获取通用主数据类型返回Options
 *	table:当前表名  docId：当前docID  valueName:当前字段名  type：通用主数据的类型
 */
function getDatatype(table, docId, valueName, type, isNull) {
    var opts = $TOOLS.createOptions();
    var sql1 = "select * from " + table + " where id='" + docId + "' ";
    var data = findBySQL(sql1);
    var value1 = "";
    if (data != null) {
        value1 = data.getItemValueAsString(valueName);
    }
    var sql = "select * from tlk_GeneralMasterData where item_type = '" + type + "' and item_State='01' order by item_TrueValue";

    if (value1 != null && !"".equals(value1)) {
        sql = "select * from tlk_GeneralMasterData where (item_type = '" + type + "' and item_State='01') or (item_type = '" + type + "' and item_State='02' and item_TrueValue='" + value1 + "' ) order by item_TrueValue";
    }
    if (isNull) {
        opts.add("", "");
    }
    var query = queryBySQLWithCache(sql);
    if (query != null) {
        for (var it = query.iterator(); it.hasNext(); ) {
            var doc = it.next();
            var value = doc.getItemValueAsString("TrueValue");
            var name = doc.getItemValueAsString("ShowValue");
            opts.add(name, value);
        }
    }
    return opts;
};

/**
 *	根据类型和真实值获取维护表的显示值
 *	table:当前表名  docId：当前docID  valueName:当前字段名  type：通用主数据的类型
 */
function getDatatShowValue(trueValue, type) {
    var sql = "select item_ShowValue,domainid from tlk_GeneralMasterData where item_type = '" + type + "' and item_TrueValue='" + trueValue + "' limit 1 ";
    var query = queryBySQLWithCache(sql);
    var value = "";
    if (query != null && query.size() > 0) {
        for (var it = query.iterator(); it.hasNext(); ) {
            var data = it.next();
            value = data.getItemValueAsString("ShowValue");
        }
    }
    return value;
};

/**
 *获取通用主数据类型返回Options，isNull是否要空选项
 */
function datatype(value, isNull) {
    var opts = $TOOLS.createOptions();
    var sql = "select * from tlk_GeneralMasterData where item_type = '" + value + "' and item_State='01' order by item_No";
    if (isNull) {
        opts.add("", "");
    }
    var query = queryBySQLWithCache(sql);
    if (query != null) {
        for (var it = query.iterator(); it.hasNext(); ) {
            var doc = it.next();
            var value = doc.getItemValueAsString("TrueValue");
            var name = doc.getItemValueAsString("ShowValue");
            opts.add(name, value);
        }
    }
    return opts;
};

/**
 *  根据传入的显示值和类型获取通用主数据的真实值
 *  showValue：显示值	type：类型
 */
function getTrueValueByShowValue(showValue, type) {
    var trueValue = "";
    var sql = "select domainid,id,item_TrueValue from tlk_GeneralMasterData where item_type = '" + type + "' and item_showValue='" + showValue + "' ";
    var data = findBySQL(sql);
    if (data != null) {
        trueValue = data.getItemValueAsString("TrueValue");
    }
    return trueValue;
};

/**
 *  根据传入的真实值和类型获取通用主数据的显示值
 *  showValue：显示值	type：类型
 *  定时任务   queryByDSName方式
 */
function getShowValueByTrueValueTwo(trueValue, type) {
    var showValue = "abcd";
    /**var sql = "select * from tlk_GeneralMasterData where item_type = '" + type + "' and item_TrueValue='" + trueValue + "' ";
    var datas = queryByDSName(DataSourceName, sql);
    if (datas != null && datas.size() > 0) {
    for (var iterator = datas.iterator(); iterator.hasNext(); ) {
    var data = iterator.next();
    showValue = data.get("item_ShowValue");
    }
    }**/
    return showValue;
};

/**
 *  根据传入的真实值和类型获取通用主数据的显示值
 *  trueValue：真实值	type：类型
 */
function getShowValueByTrueValue(trueValue, type) {
    var showValue = "";
    var sql = "select * from tlk_GeneralMasterData where item_type = '" + type + "' and item_TrueValue='" + trueValue + "' ";
    var data = findBySQL(sql);
    if (data != null) {
        showValue = data.getItemValueAsString("ShowValue");
    }
    return showValue;
};

//阿拉伯数字转中文数字
var changeNum = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];
var unit = ["", "十", "百", "千", "万"];
/*数字返回汉字,最大 千亿 */
function returnCN(num) {
    num = Math.floor(num)
        var ny = Math.floor(num / 100000000);
    num = ny ? (num - ny * 100000000) : num;
    var nw = Math.floor(num / 10000);
    num = nw ? (num - nw * 10000) : num;
    var znum = ny ? getCh(ny) + '亿' + getCh(nw) + '万' + getCh(num) : nw ? getCh(nw) + '万' + getCh(num) : getCh(num);
    if (num < 20) {
        znum = znum.replace('一十', '十');
    }
    return znum
};
function getCh(temp) {
    var strArr = temp.toString().split("").reverse();
    var newNum = "";
    　　for(var i = 0; i < strArr.length; i++) {
        　　newNum = (i == 0 && strArr[i] == 0 ? "" : (i > 0 && strArr[i] == 0 && strArr[i - 1] == 0 ? "" : changeNum[strArr[i]] + (strArr[i] == 0 ? unit[0] : unit[i]))) + newNum;
        　　
    }
    　 return newNum;
};

/*
userId 用户Id
stateLabelName 流程节点名称
documentObject 文档对象
根据用户Id判断当前用户是否属于某节点的审批人是返回false;不是返回true
 */
function DocumentJudgeProcessApprover(documentObject, userId, stateLabelName) {
    var stateLabelInfo = documentObject.getStateLabelInfo();
    var JsonArray = new Packages.com.alibaba.fastjson.JSONArray();
    if (isNotNull(stateLabelInfo)) {
        var stateLabelInfoArray = JsonArray.parseArray(stateLabelInfo);
        if (stateLabelInfoArray) {
            for (var iter = stateLabelInfoArray.iterator(); iter.hasNext(); ) {
                var stateLabelInfoString = iter.next();
                var nodes = stateLabelInfoString.get("nodes");
                if (nodes.size() > 0) {
                    for (var nodesiter = nodes.iterator(); nodesiter.hasNext(); ) {
                        var nodesiterStr = nodesiter.next();
                        var auditors = nodesiterStr.get("auditors");
                        var stateLabel = nodesiterStr.get("stateLabel");
                        if (auditors.size() > 0) {
                            for (var auditorsList = auditors.iterator(); auditorsList.hasNext(); ) {
                                var auditorsListObject = auditorsList.next();
                                var id = auditorsListObject.get("id");
                                if (userId.equals(id) && (stateLabelName.equals(stateLabel) || stateLabel.indexOf(stateLabelName) > -1)) {
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}



/*创建请求日志*/
function apiLogCreate(apiName, requestParameters, returnParameters, request) {
    var domainid = DomainId;
    var applicationId = ApplicationId;
    var userProcess = createProcess("cn.myapps.authtime.user.service.UserProcess"); //获取用户业务处理类
    var userVo = userProcess.login(SystemlLogin, domainid);
    var user = new Packages.cn.myapps.base.web.WebUser(userVo);
    var formProcess = new Packages.cn.myapps.designtime.form.service.FormDesignTimeServiceImpl(); //4.4或5.0版本
    var newForm = formProcess.doViewByFormName("apiLog", applicationId);
    var docProcess = getDocProcess(applicationId);
    var newDoc = docProcess.doNew(newForm, user, new Packages.cn.myapps.common.data.ParamsTable());
    newDoc.setAuthor(userId);
    newDoc.setIstmp(false);
    var userId = user.getId();
    var ip = request.getHeader("x-forwarded-for");
    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
        ip = request.getHeader("Proxy-Client-IP");
    }
    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
        ip = request.getHeader("WL-Proxy-Client-IP");
    }
    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
        ip = request.getHeader("HTTP_CLIENT_IP");
    }
    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
        ip = request.getHeader("HTTP_X_FORWARDED_FOR");
    }
    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
        ip = request.getHeader("X-Real-IP");
    }
    if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
        ip = request.getRemoteAddr();
    }
    newDoc.addStringItem("apiName", apiName);
    newDoc.addStringItem("ip", ip);
    newDoc.addDateItem("requestTime", getToday());
    newDoc.addStringItem("requestParameters", requestParameters);
    newDoc.addStringItem("returnParameters", returnParameters);
    docProcess.doCreate(newDoc);
}


/**
	GroupName 企业微信群名
	GroupMaster 群主账号
	GroupMemberList 群成员列表 arraylist
	GroupId 群id 只能传入字母和数字不能且不能有特殊字符
 **/
function CreateEnterpriseWechatGroup(GroupName, GroupMaster, GroupMemberList, GroupId) {
	var weixinHttpsRequestUtil = new Packages.cn.myapps.support.weixin.util.WeixinHttpsRequestUtil();
    var corpid = getWebUser().getDomain().getWeixinCorpID();
    var QyApiService = new Packages.cn.myapps.support.weixin.service.QyApiService();
    var accessTokenVo = QyApiService.refreshAccessToken(corpid, EnterpriseWechatKey);
    var createUserMap = new Packages.java.util.HashMap();
    var Token = accessTokenVo.getToken();
    var url = "https://qyapi.weixin.qq.com/cgi-bin/appchat/create?access_token=" + Token; //创建群
    createUserMap.put("name", GroupName);
    createUserMap.put("owner", GroupMaster);
    createUserMap.put("userlist", GroupMemberList);
    createUserMap.put("chatid", GroupId);
    var resultJson = new Packages.net.sf.json.JSONObject.fromObject(createUserMap);
    var result = weixinHttpsRequestUtil.post(url, resultJson.toString());
    if (result != null && !"".equals(result)) {
        var errcode = result.getInt("errcode");
        if (errcode == 0) {
            var errmsg = result.getString("errmsg");
            return errmsg;
        } else {
            var errmsg = result.getString("errmsg");
            return errmsg;
        }
    }
}

/*
GroupId 群Id
MessageText 消息文本
 */
function SendTextMessage(GroupId, MessageText) {
	var weixinHttpsRequestUtil = new Packages.cn.myapps.support.weixin.util.WeixinHttpsRequestUtil();
    var corpid = getWebUser().getDomain().getWeixinCorpID();
    var QyApiService = new Packages.cn.myapps.support.weixin.service.QyApiService();
    var accessTokenVo = QyApiService.refreshAccessToken(corpid, EnterpriseWechatKey);
    var sendMessageMap = new Packages.java.util.HashMap();
    var sendMessageTextMap = new Packages.java.util.HashMap();
    var Token = accessTokenVo.getToken();
    sendMessageMap.put("chatid", GroupId);
    sendMessageMap.put("msgtype", "text");
    sendMessageTextMap.put("content", MessageText);
    sendMessageMap.put("text", sendMessageTextMap);
    sendMessageMap.put("safe", 0);
    var apiUrl = "https://qyapi.weixin.qq.com/cgi-bin/appchat/send?access_token=" + Token; //发送消息
    var resultJson = new Packages.net.sf.json.JSONObject.fromObject(sendMessageMap);
    var result = weixinHttpsRequestUtil.post(apiUrl, resultJson.toString());
    if (result != null && !"".equals(result)) {
        var errmsg = result.getString("errmsg");
        return errmsg;
    }
}]]></content>
  <version>0</version>
  <description><![CDATA[]]></description>
</repositoryVO>