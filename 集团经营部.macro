<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<repositoryVO id="__6GBcF1BXYHd6aQQfal2">
  <name>集团经营部</name>
  <parentId>__avYbKPJJjObzoPrV2er</parentId>
  <description>集团经营部</description>
  <content><![CDATA[var managementIndex = ['财务指标', '经营业务指标', '重点任务']
var subJyPersonInCharge = "子公司经营管理部经办人";

/**
 * 同步子任务的指标表数据至父任务中
 * @param {string} formName 指标表名
 */
function SyncSubTaskDataToParent(formName) {
  // var formName = "财务指标01"
  var parentDoc = getCurrentDocument()//getParentDocument()
  var parentId = parentDoc.getId()
  var currentUser = getWebUser()
  var parentTaskId = parentDoc.getItemValueAsString('父任务ID')
  var item_上级公司ID = parentDoc.getItemValueAsString('上级公司ID')
  var companyId = parentDoc.getItemValueAsString('公司')
  var companyName = parentDoc.getItemValueAsString('公司名称')
  var sql = "select * from tlk_" + formName + " where parent='" + parentId + "'"
  var query = queryBySQL(sql);
  var curTaskItemArr = []
  
  if(query!=null && query.size() > 0){
    var iter = query.iterator();
    while(iter != null && iter.hasNext()){
      var item = iter.next();
      var itemId = item.getId()
      curTaskItemArr.push(item)
    }
  }

  var insertFieldNameArr = [] // 字段集
  var keyArr = []
  curTaskItemArr.forEach(function(item) {
    var itemId = item.getId()
    // 获取字段集合
    if(keyArr.length <= 0) {
      var itemMap = item.getItemMap()
      var keySet = itemMap.keySet()
      var keylength = keySet.size()
      for (var iter = keySet.iterator(); keySet != null && iter.hasNext(); ) {
        var key = iter.next();
        // 字段名只需要存储一次
        if(keyArr.length <= keylength - 1) {
          keyArr.push(String(key))
          // insertFieldNameArr.push("item_" + key)
        }
      }
    }
    var insertData = []
    insertData.push({
      type: 'parent',
      value: parentTaskId
    })
    keyArr.forEach(function(arrValue) {
      switch (arrValue) {
        default:
          insertData.push({
            key: arrValue,
            value: item.getItemValueAsString(arrValue)
          })
          break;
        case '所属公司':
          insertData.push({
            key: arrValue,
            value: companyId
          })
          break;
        case '所属公司名称':
          insertData.push({
            key: arrValue,
            value: companyName
          })
          break;
        case '年份':
          insertData.push({
            type: 'date',
            key: arrValue,
            value: item.getItemValueAsDate(arrValue)
          })
          break;
        case '序号':
            insertData.push({
              type: 'int',
              key: arrValue,
              value: item.getItemValueAsInt(arrValue)
            })
            break;
        case '全局序号':
            insertData.push({
                type: 'int',
                key: arrValue,
                value: item.getItemValueAsInt(arrValue)
            })
            break;
        case '原ID':
          insertData.push({
            key: arrValue,
            value: itemId
          })
          break;
        case '上级公司ID':
            insertData.push({
              key: arrValue,
              value: item_上级公司ID
            })
            break;
      }
    })
    createNewFormData(formName, currentUser, insertData)
  })
}

/**
 * 读取指标列表数据
 * @param {string} formName 
 * @returns 
 */
function getIndexViewData(formName) {
  var parentDoc = getRelateDocument();
  var companyId = parentDoc.getItemValueAsString('公司'); 
  var year = parentDoc.getItemValueAsString('年份'); 
  if(!isNotNull(companyId)) {
    companyId = 'empty'
  }
  var sql = "select * FROM tlk_" + formName + " where YEAR(item_年份)='" + year 
  + "' and item_关联公司列表 LIKE '%" + companyId + "%'";
  return sql;
}


function getScheduleIndexViewData(formName, subTask) {
  var parentDoc = getRelateDocument();
  var companyId = parentDoc.getItemValueAsString('公司'); 
  var year = parentDoc.getItemValueAsString('年份'); 
  var season = parentDoc.getItemValueAsString('季度'); 
  var state = parentDoc.getItemValueAsString('子表编辑状态'); 
  // var state = item_子表编辑状态
  // if(item_子表编辑状态 == '未编辑') {
  //   state = '编辑中'
  // }
	if(!isNotNull(companyId)) {
    companyId = 'empty'
  }
  var sql = "select * FROM tlk_" + formName + " where item_子任务指标='" + subTask + "' and YEAR(item_年份)='" 
  + year + "' and item_季度='" + season + "' and item_数据状态='" + state 
  + "'  and item_关联公司列表 LIKE '%" + companyId + "%'";

  return sql;
}


// 更新流程参与审批人
function updateFlowUser () {
  var currentUser = getWebUser()
  var process = getDocumentProcess()
  var userId = currentUser.getId()
  var doc = getCurrentDocument()
  var value = getItemValueAsString('全流程参与审批人')
  if (value.indexOf(userId) < 0) {
    value = value + ";" + userId
    doc.findItem("全流程参与审批人").setValue(value); 
    process.doUpdate(doc);
  }
}

/**
 * 设置当前节点的审批人，为上一节点审批人所属部门中指定角色的用户
 * @param {*} roleName 指定角色名
 * @returns 
 */
function setCurrNodeAuditorUsers(lastRoleName, currRoleName, backupDeptName) {
  var users = createObject("java.util.ArrayList"); 
  println('users--------------------' + users);  
  if (!isNotNull(currRoleName)) return users;
  
  // 获取部门中指定角色的用户
  function findUsersInDepartment(deptId) {
    var users = createObject("java.util.ArrayList"); 
    var roleArr = currRoleName.split(";");
    roleArr.forEach(function(role) {
      var roleid = getRoleIdByName(role);
      var roleUsers = getUsersByDptIdAndRoleId(deptId, roleid);
      users.addAll(roleUsers);
    });
    return users
  }

  var currentUser = getWebUser();
  var dataDeptId = getItemValueAsString('数据所属部门');
  var dataDeptCompany = getCompanyTheDeptBelongto(dataDeptId).dept // 部门所属公司
  
  var dataDeptCompanyId = dataDeptCompany.getId()
  var companyId = getItemValueAsString('公司');
  // 获取上一节点审批人指定角色所属的部门，需当前数据所属部门属于相同的公司
  var userDept = ""
  var userDeptArr = getDeptByUserIdAndRoleName(currentUser.getId(), getRoleIdByName(lastRoleName)) // 用户指定角色所属部门，可能有多个
  
  // println('lastRoleName--------------------' + lastRoleName);  
  // println('userDeptArr--------------------' + userDeptArr);
  if(userDeptArr!=null && userDeptArr.size() > 0){
    var iter = userDeptArr.iterator();
    while(iter != null && iter.hasNext()){
      var item = iter.next();
      var itemDeptId = item.get("departmentid")
      var itemCompany = getCompanyTheDeptBelongto(itemDeptId).dept
      println('itemCompany--------------------' + itemCompany.getId());
      println('dataDeptCompanyId--------------------' + dataDeptCompanyId);
      // 判断审批人指定角色所属部门的所属公司，是否与当前数据所属部门的所属公司相同
      if(itemCompany.getId().equals(dataDeptCompanyId)) {
        userDept = getDeptById(itemDeptId)
        break;
      }
    }
  }
  
  
  //println('userDept Name--------------------' + userDept.getName());
  
  users = findUsersInDepartment(userDept.getId());
  
  // 如果不存在用户，在备用部门进行匹配
  if (users.size() <= 0) {
    var deptUnderList = getDepartmentsByParent(companyId);
    for (var iter = deptUnderList.iterator(); iter.hasNext();) {
      var deptUnder = iter.next();
      var deptName = deptUnder.getName();
      if (deptName.endsWith(backupDeptName)) {
        var backupDeptId = deptUnder.getId();
        users = findUsersInDepartment(backupDeptId);
      }
    } 
  }
  println('users--------------------' + users);

  return users;
}


/**
 * 导入数据后删除重复数据。查询"原ID"不为空的数据，删除ID等于"原ID"的数据
 * @param {*} formName 表名
 * @param {*} subIndex 子任务指标
 */
function delOldDataAfterImport(formName, subIndex) {
  var parentDoc = getParentDocument()
  var parentId = parentDoc.getId()
  if(isNotNull(parentId)) {
    var sql = "select * from tlk_" + formName + " where parent='" + parentId + "' and item_原ID IS NOT NULL AND item_原ID <> ''"
    println('sql===='+sql);
    if(isNotNull(subIndex)) {
      sql = sql + " and item_子任务指标='" + subIndex + "'"
    }
    var query = queryBySQL(sql);
    if(query!=null && query.size() > 0){
      var delIds = []
      var iter = query.iterator();
      while(iter != null && iter.hasNext()){
        var item = iter.next();
        var item_原ID = item.getItemValueAsString("原ID")
        delIds.push("'" + item_原ID + "'")
      }
      var delSql = "delete from tlk_" + formName + " where parent='" + parentId + "' and id in (" + delIds.join(",") + ")"
      println('delSql===='+delSql);
      deleteByDSName(dsName, delSql);
    } 
  }
  // 将导入数据的原ID修改为当前ID，避免二次导入无法删除重复数据
  var sql = "select * from tlk_" + formName
  var query = queryBySQL(sql);
  if(query!=null && query.size() > 0){
    var delIds = []
    var iter = query.iterator();
    while(iter != null && iter.hasNext()){
      var item = iter.next();
      item.findItem('原ID').setValue(item.getId())
      var process = getDocumentProcess()
      process.doUpdate(item);
    }
  }
}

/**
 * 设置指标排序号，为指标所属公司的排序号*1000+序号
 * @returns 
 */
function setIndexOrder() {
  var deptId = getItemValueAsString('公司');
  var order = getItemValueAsInt('序号');
//println("order=="+order);
//var order = parseInt(order);
//println("order1=="+order);
  if(!isNotNull(deptId)) {
    return order
  }
  var dept = getDeptById(deptId)
  var orderbyno = dept.getOrderByNo()
  var level = 20 * dept.getLevel()
  var result = (orderbyno + level) * 1000 + order
  return result;
}

/**
 * 同步附件到父任务
 */
function SyncFileAttachmentToParent() {
  var fiels = getItemValueAsString('提交附件')
  if(!isNotNull(fiels)) {
    return
  }
  var process = getDocumentProcess();
  var parentTaskId = getItemValueAsString('父任务ID')
  var parentTaskDoc = findDocument(parentTaskId)
  if(isNotNull(parentTaskDoc)) {
    var parentFiles = parentTaskDoc.getItemValueAsString('接收附件')
    if(!isNotNull(parentFiles)) {
      parentFiles = "[]"
    }
    var parentFilesArr = JSON.parse(parentFiles)
    var fielsArr = JSON.parse(fiels)
    var newFilesArr = parentFilesArr.concat(fielsArr);
    var newFiles = JSON.stringify(newFilesArr)
    parentTaskDoc.findItem('接收附件').setValue(newFiles)
    process.doUpdate(parentTaskDoc)
  }
}]]></content>
  <version>0</version>
</repositoryVO>